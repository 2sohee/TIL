/* 동기, 비동기 프로그래밍이란?

프로그래밍이 순서대로 진행되는 것을 ```동기 프로그래밍```이라고 한다. */


console.log("A")
console.log("B")
console.log("C")

A
B
C
/* 
위의 코드처럼 순서대로 출력된다.
그러나 다른 프로그램을 실행을 하다보면 특정 부분에서 실행이 오래걸리는 경우가 있다 */

console.log("A")
setTimeout(() => console.log("B"), 3000); // 3초 뒤에 실행하라는 명령
console.log("C")

A
C
B

/* 예를들어 이런 경우에는 A와C가 먼저 실행되고 3초 뒤에 B가 표시되면서 
순서대로 진행되지 않는 경우가 있다. 이런 경우를 ```비동기 프로그래밍``` 이라고 한다.

작업을 시작해서 끝내는 것을 하나의 스레드(thread)라고 하는데
멀티스레드는 스레드를 한꺼번에 여러개를 처리할 수 있다는 뜻인데 자바스크립트는
```싱글스레드```로 1번에 1개의 작업밖에 못하기때문에 순서가 느려질 수 밖에 없다.

## ajax 기법
```사이트에서 특정 부분의 내용만 변경할 수 있는것```으로 비동기 프로그램이다.
사이트 전체를 한꺼번에 가져와서 한꺼번에 보여주는게 아니라 내가 현재 보여줄것만
일단 화면에 보여주고 비동기를 통해서 뉴스나 폰트같은 필요한 부분을 먼저 보여줄 수 있다.

자바스크립트를 서버와 통신하면서 사용을 하기 때문에 얘를 서버와 주고받을 때도
처리가 오래걸리는 일이 있다. 그때 오래걸리는 일을 계속 기다리지 않고 서버한테 먼저
요청을 한 후에 시간이 걸리기 때문에 다른 작업을 할 수 있다.

## 세 가지 비동기 방식
1. ```콜백함수``` - 함수안에 또다른 함수가 매개변수로 넘어가는 것
ex) 커피 매장이라고 가정해보자.
동기적으로 프로그래밍 한다면
A사람이 커피를 주문하고 직원1이 주문을 받고 직원1이 커피를 만들어 A에게 준다.
이때 뒤에 있는 B와 C손님은 주문을 할 수 없다.

비동기적으로 프로그래밍 한다면
A사람이 커피를 주문하면 직원1이 주문을 받고 A에게 진동벨을 준다. 또 다른 직원2가 
커피를 만들어 A에게 전달하고 그 사이 직원1은 다른 손님인 B와 C의 주문도 순차적으로
받아 실행할 수 있다.

이를 코드로 짜보자. */


// order라는 함수가 사용자에게 커피 주문을 받는다.
function order(coffee, callback) //주문받고나서 처리해야될 함수를 callback형태로 넣어줌
console.log(`${coffee}주문 접수`); // 사용자가 {}안의 커피를 주문한것
setTimeout(() => {callback(coffee);}, 3000);} // 3초 후에 이 콜백 함수를 실행한다

function display(result) {console.log(`${result} 준비 완료`);}
// 3초 후에 커피가 다 준비된상태라고 알려주는 함수
//이 display 함수를 callback형태로 넘겨준것이다.

order("아메리카노", display); 
// order라는 함수를 실행하고 사용자가 주문한것은 아메리카노,
//아메리카노를 주문한 후 실행할 함수는 display라는 함수라는 뜻이다.


/* 비동기로 이루어지는 일들이 콜백을 통해서 서로 연결이 된것이다.
order과 display라는 함수가 순차적으로 일어나도록 지정한것.
간단한것은 콜백함수로 지정해도 크게 문제가 되지 않는다.

## 익명 콜백 사용
예를 들어 1초마다 A-B-C-D-STOP! 순으로 표시하는 함수를 만든다고 했을 때
함수이름을 따로 지정하지 않고 함수안에 익명함수를 사용한다. */


function displayLatter() {
  console.log("A"); //A를 먼저 한번찍고
  setTimeout(() => {
    console.log("B"); //1초 후에 b를 찍고
    setTimeout(() => {
    console.log("C"); //1초 후에 c를 찍고
      setTimeout(() => {
    console.log("D"); //1초 후에 d를 찍고
        setTimeout(() => {
    console.log("stop!"); //1초 후에 "stop!"를 찍고
        }, 1000);
         }, 1000);
       }, 1000);
     }, 1000);
}
displayLetter();  

/* 이렇게 콜백이 꼬리를 물고 들어가있는 것을 ```콜백 지옥```이라고 한다.
소스의 가독성이 떨어지고, 오류가 발생했을 때 디버깅하기 어렵다. */

 